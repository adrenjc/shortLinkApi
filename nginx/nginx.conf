# 设置为CPU核心数
worker_processes auto;
worker_rlimit_nofile 65535;

events {
    worker_connections 10240;
    multi_accept on;
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # SSL 会话缓存
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;

    # SSL 协议和加密套件配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;

    # 优化日志格式
    log_format detailed escape=json
    '{'
    '"time_local":"$time_local",'
    '"remote_addr":"$remote_addr",'
    '"request":"$request",'
    '"status": "$status",'
    '"body_bytes_sent":"$body_bytes_sent",'
    '"request_time":"$request_time",'
    '"http_referrer":"$http_referer",'
    '"http_user_agent":"$http_user_agent",'
    '"http_x_forwarded_for":"$http_x_forwarded_for",'
    '"upstream_response_time":"$upstream_response_time"'
    '}';

    # 基础性能优化
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    
    # 调整keepalive设置
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    server_tokens off;
    
    # 调整客户端缓冲区
    client_body_buffer_size 128k;
    client_max_body_size 10m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # 调整代理缓冲
    proxy_buffering on;
    proxy_buffer_size 16k;
    proxy_buffers 8 32k;
    proxy_busy_buffers_size 64k;
    proxy_temp_file_write_size 64k;
    proxy_max_temp_file_size 1024m;

    # GZIP 压缩优化
    gzip  on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_min_length 1k;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # 限流配置
    limit_req_zone $binary_remote_addr zone=api:20m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=redirect:20m rate=200r/s;

    # 后端服务器配置
    upstream backend {
        server 127.0.0.1:8080;
        keepalive 100;
        keepalive_requests 1000;
        keepalive_timeout 60s;
    }

    # IP访问配置 - 全部重定向到域名
    server {
        listen 80;
        listen 443 ssl;
        server_name 38.95.121.181;  # 替换为你的服务器IP

        # SSL 配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_certificate /etc/nginx/ssl/onetop.vip.pem;
        ssl_certificate_key /etc/nginx/ssl/onetop.vip.key;

        # 所有请求都重定向到域名
        location / {
            return 301 https://www.onetop.vip$request_uri;
        }
    }

    # 主域名重定向配置 - 将 onetop.vip 重定向到 www.onetop.vip
    server {
        listen 80;
        listen 443 ssl;
        server_name onetop.vip;

        # SSL 配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        ssl_certificate /etc/nginx/ssl/onetop.vip.pem;
        ssl_certificate_key /etc/nginx/ssl/onetop.vip.key;

        # 所有请求重定向到 www 域名
        return 301 $scheme://www.onetop.vip$request_uri;
    }

    # 主域名服务器配置 - 用于管理后台
    server {
        listen 80;
        listen 443 ssl;
        server_name www.onetop.vip;

        # SSL 配置
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;
        
        # Cloudflare Origin 证书
        ssl_certificate /etc/nginx/ssl/onetop.vip.pem;
        ssl_certificate_key /etc/nginx/ssl/onetop.vip.key;

        # 日志配置
        access_log  /var/log/nginx/default.access.log detailed buffer=64k flush=5s;
        error_log   /var/log/nginx/default.error.log;

        root   /var/www/shortlink/dist;
        index  index.html index.htm;

        # 前端静态资源
        location / {
            try_files $uri $uri/ /index.html;
            expires 1h;
            add_header Cache-Control "public, no-transform";
        }

        # API接口
        location /api/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 禁用缓存
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "-1";
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            limit_req zone=api burst=100 nodelay;
        }

        # 短链跳转接口
        location ~* ^/r/(.+)$ {
            proxy_pass http://backend/api/r/$1;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 禁用缓存
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "-1";
            
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            limit_req zone=redirect burst=200 nodelay;
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /usr/share/nginx/html;
        }
    }

    # 通配符服务器 - 处理所有自定义域名
    server {
        listen 80;
        listen 443 ssl;
        server_name _;

        # 动态 SSL 证书配置
        ssl_certificate_by_lua_block {
            local ssl = require "ngx.ssl"
            local domain = ssl.server_name()
            
            -- 检查证书文件是否存在
            local cert_path = "/etc/nginx/ssl/domains/" .. domain .. "/fullchain.pem"
            local key_path = "/etc/nginx/ssl/domains/" .. domain .. "/key.pem"
            
            local f = io.open(cert_path, "r")
            if f then
                f:close()
                -- 设置证书和私钥
                local ok, err = ssl.clear_certs()
                if not ok then
                    ngx.log(ngx.ERR, "failed to clear existing certificates")
                    return ngx.exit(ngx.ERROR)
                end
                
                ok, err = ssl.set_cert_and_key(cert_path, key_path)
                if not ok then
                    ngx.log(ngx.ERR, "failed to set cert and key: ", err)
                    return ngx.exit(ngx.ERROR)
                end
            else
                -- 如果证书不存在，返回普通 HTTP
                return ngx.exit(0)
            end
        }

        # 添加安全相关的响应头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;

        access_log  /var/log/nginx/domains.access.log detailed buffer=64k flush=5s;
        error_log   /var/log/nginx/domains.error.log;

        # 短链跳转接口
        location ~* ^/r/(.+)$ {
            proxy_pass http://backend/api/r/$1;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            
            proxy_set_header Host $http_host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $http_host;
            
            # 禁用缓存
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            add_header Pragma "no-cache";
            add_header Expires "-1";
            
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 3;
            
            proxy_connect_timeout 10s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            limit_req zone=redirect burst=200 nodelay;
        }

        # 对于非短链接请求返回404
        location / {
            return 404;
        }
    }
}